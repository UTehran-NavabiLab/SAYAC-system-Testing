
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )


-- Executing script file `yosys_script.ys' --

1. Executing GHDL.
Importing module TRF_MBIST_TOP.
Importing module trf_mbist_controller.
Importing module trf_mbist_dp.
Importing module counter_9.
Importing module decoder.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: decoder             
root of   0 design levels: counter_9           
root of   1 design levels: trf_mbist_dp        
root of   0 design levels: trf_mbist_controller
root of   2 design levels: TRF_MBIST_TOP       
Automatically selected TRF_MBIST_TOP as design top module.

2.2. Analyzing design hierarchy..
Top module:  \TRF_MBIST_TOP
Used module:     \trf_mbist_dp
Used module:         \decoder
Used module:         \counter_9
Used module:     \trf_mbist_controller

2.3. Analyzing design hierarchy..
Top module:  \TRF_MBIST_TOP
Used module:     \trf_mbist_dp
Used module:         \decoder
Used module:         \counter_9
Used module:     \trf_mbist_controller
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \TRF_MBIST_TOP
Used module:     \trf_mbist_dp
Used module:         \decoder
Used module:         \counter_9
Used module:     \trf_mbist_controller

3.1.2. Analyzing design hierarchy..
Top module:  \TRF_MBIST_TOP
Used module:     \trf_mbist_dp
Used module:         \decoder
Used module:         \counter_9
Used module:     \trf_mbist_controller
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module decoder.
<suppressed ~1 debug messages>
Optimizing module counter_9.
Optimizing module trf_mbist_dp.
<suppressed ~2 debug messages>
Optimizing module trf_mbist_controller.
<suppressed ~2 debug messages>
Optimizing module TRF_MBIST_TOP.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module decoder.
Optimizing module counter_9.
Optimizing module trf_mbist_dp.
Optimizing module trf_mbist_controller.
Optimizing module TRF_MBIST_TOP.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \trf_mbist_dp..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \TRF_MBIST_TOP..
Removed 0 unused cells and 24 unused wires.
<suppressed ~5 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module TRF_MBIST_TOP...
Checking module counter_9...
Checking module decoder...
Checking module trf_mbist_controller...
Checking module trf_mbist_dp...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
<suppressed ~15 debug messages>
Finding identical cells in module `\trf_mbist_dp'.
<suppressed ~9 debug messages>
Removed a total of 8 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
    New ctrl vector for $pmux cell \78: { $auto$opt_reduce.cc:134:opt_mux$73 $auto$ghdl.cc:759:import_module$12 }
    New ctrl vector for $pmux cell \84: { $auto$opt_reduce.cc:134:opt_mux$77 $auto$opt_reduce.cc:134:opt_mux$75 }
    New ctrl vector for $pmux cell \89: { $auto$ghdl.cc:759:import_module$14 $auto$opt_reduce.cc:134:opt_mux$79 }
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 3 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 0 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking trf_mbist_controller.pstate as FSM state register:
    Circuit seems to be self-resetting.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on \191 ($dff) from module counter_9 (D = $auto$ghdl.cc:759:import_module$52, Q = \temp, rval = 10'0000000000).
Adding EN signal on $auto$opt_dff.cc:731:run$80 ($sdff) from module counter_9 (D = $auto$ghdl.cc:759:import_module$51, Q = \temp).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 9 bits (of 10) from port B of cell counter_9.\180 ($add).
Removed top 9 bits (of 10) from port B of cell counter_9.\183 ($sub).
Removed top 3 bits (of 4) from port B of cell decoder.\200 ($eq).
Removed top 2 bits (of 4) from port B of cell decoder.\202 ($eq).
Removed top 2 bits (of 4) from port B of cell decoder.\204 ($eq).
Removed top 1 bits (of 4) from port B of cell decoder.\206 ($eq).
Removed top 1 bits (of 4) from port B of cell decoder.\208 ($eq).
Removed top 1 bits (of 4) from port B of cell decoder.\210 ($eq).
Removed top 1 bits (of 4) from port B of cell decoder.\212 ($eq).
Removed top 2 bits (of 3) from mux cell trf_mbist_controller.\27 ($mux).
Removed top 1 bits (of 3) from mux cell trf_mbist_controller.\32 ($mux).
Removed top 2 bits (of 3) from port B of cell trf_mbist_controller.\34 ($eq).
Removed top 1 bits (of 3) from mux cell trf_mbist_controller.\39 ($mux).
Removed top 1 bits (of 3) from mux cell trf_mbist_controller.\41 ($mux).
Removed top 1 bits (of 3) from port B of cell trf_mbist_controller.\43 ($eq).
Removed top 1 bits (of 3) from port B of cell trf_mbist_controller.\53 ($eq).
Removed top 2 bits (of 3) from wire trf_mbist_controller.$auto$ghdl.cc:759:import_module$11.
Removed top 1 bits (of 3) from wire trf_mbist_controller.$auto$ghdl.cc:759:import_module$13.
Removed top 1 bits (of 3) from wire trf_mbist_controller.$auto$ghdl.cc:759:import_module$17.
Removed top 1 bits (of 3) from wire trf_mbist_controller.$auto$ghdl.cc:759:import_module$18.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TRF_MBIST_TOP:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module counter_9:
  creating $macc model for \180 ($add).
  creating $macc model for \183 ($sub).
  creating $alu model for $macc \183.
  creating $alu model for $macc \180.
  creating $alu cell for \180: $auto$alumacc.cc:485:replace_alu$86
  creating $alu cell for \183: $auto$alumacc.cc:485:replace_alu$89
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module trf_mbist_controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module trf_mbist_dp:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
<suppressed ~7 debug messages>
Optimizing module trf_mbist_dp.
<suppressed ~1 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 2 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
    Consolidated identical input bits for $mux cell \32:
      Old ports: A=2'00, B=2'11, Y=$auto$ghdl.cc:759:import_module$13
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:759:import_module$13 [0]
      New connections: $auto$ghdl.cc:759:import_module$13 [1] = $auto$ghdl.cc:759:import_module$13 [0]
    Consolidated identical input bits for $mux cell \39:
      Old ports: A=2'00, B=2'10, Y=$auto$ghdl.cc:759:import_module$17
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:759:import_module$17 [1]
      New connections: $auto$ghdl.cc:759:import_module$17 [0] = 1'0
    Consolidated identical input bits for $mux cell \47:
      Old ports: A=3'000, B=3'100, Y=$auto$ghdl.cc:759:import_module$21
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:759:import_module$21 [2]
      New connections: $auto$ghdl.cc:759:import_module$21 [1:0] = 2'00
  Optimizing cells in module \trf_mbist_controller.
    Consolidated identical input bits for $mux cell \49:
      Old ports: A=$auto$ghdl.cc:759:import_module$21, B=3'010, Y=$auto$ghdl.cc:759:import_module$22
      New ports: A={ $auto$ghdl.cc:759:import_module$21 [2] 1'0 }, B=2'01, Y=$auto$ghdl.cc:759:import_module$22 [2:1]
      New connections: $auto$ghdl.cc:759:import_module$22 [0] = 1'0
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 4 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux \184 in front of them:
        $auto$alumacc.cc:485:replace_alu$86
        $auto$alumacc.cc:485:replace_alu$89

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
<suppressed ~2 debug messages>
Optimizing module decoder.
Optimizing module trf_mbist_controller.
<suppressed ~3 debug messages>
Optimizing module trf_mbist_dp.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$95:
      Old ports: A=10'1111111111, B=10'0000000001, Y=$auto$rtlil.cc:2409:Mux$96
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2409:Mux$96 [1]
      New connections: { $auto$rtlil.cc:2409:Mux$96 [9:2] $auto$rtlil.cc:2409:Mux$96 [0] } = { $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] $auto$rtlil.cc:2409:Mux$96 [1] 1'1 }
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 1 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 0 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
<suppressed ~1 debug messages>
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$de91941a80104a781d89455c89227cbd386bf4f4\_90_pmux for cells of type $pmux.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~355 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
<suppressed ~16 debug messages>
Optimizing module decoder.
<suppressed ~556 debug messages>
Optimizing module trf_mbist_controller.
<suppressed ~23 debug messages>
Optimizing module trf_mbist_dp.
<suppressed ~4 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
<suppressed ~3 debug messages>
Finding identical cells in module `\decoder'.
<suppressed ~156 debug messages>
Finding identical cells in module `\trf_mbist_controller'.
<suppressed ~15 debug messages>
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 58 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 15 unused cells and 247 unused wires.
<suppressed ~19 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\TRF_MBIST_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `\counter_9' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 88 wires to a netlist network with 21 inputs and 10 outputs.

3.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       18
ABC RESULTS:               MUX cells:        9
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       10
Removing temp directory.

3.22.3. Extracting gate netlist of module `\decoder' to `<abc-temp-dir>/input.blif'..
Extracted 75 gates and 80 wires to a netlist network with 4 inputs and 16 outputs.

3.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:       11
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.4. Extracting gate netlist of module `\trf_mbist_controller' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 58 wires to a netlist network with 8 inputs and 6 outputs.

3.22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       15
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:       12
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        6
Removing temp directory.

3.22.5. Extracting gate netlist of module `\trf_mbist_dp' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 23 wires to a netlist network with 5 inputs and 6 outputs.

3.22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       12
ABC RESULTS:           input signals:        5
ABC RESULTS:          output signals:        6
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
<suppressed ~1 debug messages>
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..
Removed 0 unused cells and 155 unused wires.
<suppressed ~4 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \TRF_MBIST_TOP
Used module:     \trf_mbist_controller
Used module:     \trf_mbist_dp
Used module:         \counter_9
Used module:         \decoder

3.24.2. Analyzing design hierarchy..
Top module:  \TRF_MBIST_TOP
Used module:     \trf_mbist_controller
Used module:     \trf_mbist_dp
Used module:         \counter_9
Used module:         \decoder
Removed 0 unused modules.

3.25. Printing statistics.

=== TRF_MBIST_TOP ===

   Number of wires:                 14
   Number of wire bits:             47
   Number of public wires:          14
   Number of public wire bits:      47
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     trf_mbist_controller            1
     trf_mbist_dp                    1

=== counter_9 ===

   Number of wires:                 76
   Number of wire bits:            101
   Number of public wires:           9
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 77
     $_ANDNOT_                      18
     $_MUX_                          9
     $_NOR_                          5
     $_NOT_                          2
     $_ORNOT_                        9
     $_OR_                           6
     $_SDFFE_PP0P_                  10
     $_XNOR_                         2
     $_XOR_                         16

=== decoder ===

   Number of wires:                 63
   Number of wire bits:            891
   Number of public wires:          24
   Number of public wire bits:     852
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                      33
     $_AND_                          5
     $_NAND_                         1
     $_NOR_                          3
     $_ORNOT_                        2
     $_OR_                          11

=== trf_mbist_controller ===

   Number of wires:                 53
   Number of wire bits:             97
   Number of public wires:          21
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $_ANDNOT_                      15
     $_AND_                          2
     $_DFF_PP0_                      3
     $_MUX_                          1
     $_NAND_                         1
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                          12

=== trf_mbist_dp ===

   Number of wires:                 22
   Number of wire bits:             78
   Number of public wires:          15
   Number of public wire bits:      71
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_ANDNOT_                       7
     $_AND_                          1
     $_NAND_                         1
     $_NOR_                          1
     $_NOT_                          1
     $_OR_                           2
     $_TBUF_                        16
     counter_9                       1
     decoder                         1

=== design hierarchy ===

   TRF_MBIST_TOP                     1
     trf_mbist_controller            1
     trf_mbist_dp                    1
       counter_9                     1
       decoder                       1

   Number of wires:                228
   Number of wire bits:           1214
   Number of public wires:          83
   Number of public wire bits:    1069
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                202
     $_ANDNOT_                      73
     $_AND_                          8
     $_DFF_PP0_                      3
     $_MUX_                         10
     $_NAND_                         3
     $_NOR_                          9
     $_NOT_                          6
     $_ORNOT_                       15
     $_OR_                          31
     $_SDFFE_PP0P_                  10
     $_TBUF_                        16
     $_XNOR_                         2
     $_XOR_                         16

3.26. Executing CHECK pass (checking for obvious problems).
Checking module TRF_MBIST_TOP...
Checking module counter_9...
Checking module decoder...
Checking module trf_mbist_controller...
Checking module trf_mbist_dp...
Found and reported 0 problems.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
<suppressed ~16 debug messages>
Optimizing module trf_mbist_controller.
<suppressed ~11 debug messages>
Optimizing module trf_mbist_dp.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_9..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \trf_mbist_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \trf_mbist_dp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
  Optimizing cells in module \counter_9.
  Optimizing cells in module \decoder.
  Optimizing cells in module \trf_mbist_controller.
  Optimizing cells in module \trf_mbist_dp.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Finding identical cells in module `\counter_9'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\trf_mbist_controller'.
Finding identical cells in module `\trf_mbist_dp'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Finding unused cells or wires in module \counter_9..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \trf_mbist_controller..
Finding unused cells or wires in module \trf_mbist_dp..

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
Optimizing module counter_9.
Optimizing module decoder.
Optimizing module trf_mbist_controller.
Optimizing module trf_mbist_dp.

4.10. Finished OPT passes. (There is nothing left to do.)

5. Executing FLATTEN pass (flatten design).
Deleting now unused module counter_9.
Deleting now unused module decoder.
Deleting now unused module trf_mbist_controller.
Deleting now unused module trf_mbist_dp.
<suppressed ~4 debug messages>

6. Executing ASYNC2SYNC pass.
Replacing TRF_MBIST_TOP.$flatten\controller.$auto$simplemap.cc:377:simplemap_ff$213 ($_DFF_PP0_): ARST=\controller.rst, D=\controller.nstate [1], Q=\controller.pstate [1]
Replacing TRF_MBIST_TOP.$flatten\controller.$auto$simplemap.cc:377:simplemap_ff$212 ($_DFF_PP0_): ARST=\controller.rst, D=\controller.nstate [0], Q=\controller.pstate [0]
Replacing TRF_MBIST_TOP.$flatten\controller.$auto$simplemap.cc:377:simplemap_ff$214 ($_DFF_PP0_): ARST=\controller.rst, D=\controller.nstate [2], Q=\controller.pstate [2]

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_N (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_N_.
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFF_NN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN0_.
  cell DFF_NN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN1_.
  cell DFF_NP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP0_.
  cell DFF_NP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP1_.
  cell DFF_PN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  cell DFF_PN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN1_.
  cell DFF_PP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP0_.
  cell DFF_PP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP1_.
  final dff cell mappings:
    \DFF_N _DFF_N_ (.C( C), .D( D), .Q( Q));
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    \DFF_NN0 _DFF_NN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NN1 _DFF_NN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP0 _DFF_NP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP1 _DFF_NP1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN0 _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN1 _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP0 _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP1 _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

7.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\TRF_MBIST_TOP':
  mapped 13 $_DFF_P_ cells to \DFF cells.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.
<suppressed ~20 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Removed 1 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

8.16. Finished OPT passes. (There is nothing left to do.)

9. Executing ABC pass (technology mapping using ABC).

9.1. Extracting gate netlist of module `\TRF_MBIST_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 194 gates and 212 wires to a netlist network with 16 inputs and 35 outputs.

9.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

9.1.2. Re-integrating ABC results.
ABC RESULTS:               BUF cells:        4
ABC RESULTS:              NAND cells:       48
ABC RESULTS:               NOR cells:       60
ABC RESULTS:               NOT cells:       22
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       35
Removing temp directory.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Removed 0 unused cells and 209 unused wires.
<suppressed ~8 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing HILOMAP pass (mapping to constant drivers).

12. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port TRF_MBIST_TOP.DETECTED using IBUF.
Mapping port TRF_MBIST_TOP.TRFAddr using OBUF.
Mapping port TRF_MBIST_TOP.TRFData_IN using OBUF.
Mapping port TRF_MBIST_TOP.TRFData_OUT using IBUF.
Mapping port TRF_MBIST_TOP.clk using IBUF.
Mapping port TRF_MBIST_TOP.rst using IBUF.
Mapping port TRF_MBIST_TOP.start using IBUF.
Mapping port TRF_MBIST_TOP.write_to_TRF using OBUF.

13. Executing SPLITNETS pass (splitting up multi-bit signals).

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Removed 777 unused cells and 1600 unused wires.
<suppressed ~1560 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

14.16. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 165 unused wires.

15. Executing TECHMAP pass (map to technology primitives).

15.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/DFF_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/DFF_map.v' to AST representation.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFF_N'.
Generating RTLIL representation for module `\DFF_PP0'.
Generating RTLIL representation for module `\DFF_PP1'.
Generating RTLIL representation for module `\DFF_PN0'.
Generating RTLIL representation for module `\DFF_PN1'.
Generating RTLIL representation for module `\DFF_NN0'.
Generating RTLIL representation for module `\DFF_NN1'.
Generating RTLIL representation for module `\DFF_NP0'.
Generating RTLIL representation for module `\DFF_NP1'.
Successfully finished Verilog frontend.

15.2. Continuing TECHMAP pass.
Using template DFF for cells of type DFF.
No more expansions possible.
<suppressed ~25 debug messages>

16. Executing ABC pass (technology mapping using ABC).

16.1. Extracting gate netlist of module `\TRF_MBIST_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

17. Executing OPT pass (performing simple optimizations).

17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

17.6. Executing OPT_DFF pass (perform DFF optimizations).

17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Removed 0 unused cells and 78 unused wires.
<suppressed ~1 debug messages>

17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

17.9. Rerunning OPT passes. (Maybe there is more to do..)

17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

17.13. Executing OPT_DFF pass (perform DFF optimizations).

17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..

17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

17.16. Finished OPT passes. (There is nothing left to do.)

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/Logic_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/Logic_map.v' to AST representation.
Generating RTLIL representation for module `\BUF'.
Generating RTLIL representation for module `\TIELOM'.
Generating RTLIL representation for module `\TIEHIM'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\NOT'.
Generating RTLIL representation for module `\AND'.
Generating RTLIL representation for module `\NAND'.
Generating RTLIL representation for module `\OR'.
Generating RTLIL representation for module `\NOR'.
Generating RTLIL representation for module `\XOR'.
Generating RTLIL representation for module `\XNOR'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
Using template NOT for cells of type NOT.
Using template IBUF for cells of type IBUF.
Using template NOR for cells of type NOR.
Using template NAND for cells of type NAND.
Using template BUF for cells of type BUF.
Using template OBUF for cells of type OBUF.
No more expansions possible.
<suppressed ~189 debug messages>

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..
Removed 0 unused cells and 458 unused wires.
<suppressed ~1 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TRF_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TRF_MBIST_TOP.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TRF_MBIST_TOP'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TRF_MBIST_TOP.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TRF_MBIST_TOP..

21. Printing statistics.

=== TRF_MBIST_TOP ===

   Number of wires:                204
   Number of wire bits:            237
   Number of public wires:          76
   Number of public wire bits:     109
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                204
     $_TBUF_                        16
     bufg                            4
     dff                            13
     nand_n                         48
     nor_n                          60
     notg                           22
     pin                            20
     pout                           21

End of script. Logfile hash: c90babc2f1, CPU: user 3.85s system 0.10s
Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )
Time spent: 19% 36x opt_expr (0 sec), 14% 30x opt_clean (0 sec), ...
