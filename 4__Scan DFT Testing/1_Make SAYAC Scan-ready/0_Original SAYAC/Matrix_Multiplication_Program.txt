Matrix Multiplication

R12: ARowNum				MSI: R12 = SE(02):			0101_00000010_1100			R12 = 2
R13: BColNum				MSI: R13 = SE(03):			0101_00000011_1101			R13 = 3
R14: AColNum				MSI: R14 = SE(02):			0101_00000010_1110			R14 = 2
---------------------------------------------------------------------------------------------------
R1: A0						MSI: R1 = SE(4):			0101_00000100_0001			R1 = 4
R10: Address of A0			MSI: R10 = SE(65):			0101_01100101_1010			R10 = 101 = 65
Store A0					STR: MEM(R10) = R1:			0010_01_0_0_0001_1010		MEM(101) = 7
---------------------------------------------------------------------------------------------------
R1: A1						MSI: R1 = SE(3):			0101_00000011_0001			R1 = 3
R2: Address of A1			MSI: R2 = SE(66):			0101_01100110_0010			R2 = 102 = 66
Store A1					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(102) = 3
---------------------------------------------------------------------------------------------------
R1: A2						MSI: R1 = SE(6):			0101_00000111_0001			R1 = 7
R2: Address of A2			MSI: R2 = SE(67):			0101_01100111_0010			R2 = 103 = 67
Store A2					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(103) = 6
---------------------------------------------------------------------------------------------------
R1: A3						MSI: R1 = SE(5):			0101_00000101_0001			R1 = 5
R2: Address of A3			MSI: R2 = SE(68):			0101_01101000_0010			R2 = 104 = 68
Store A3					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(104) = 5
---------------------------------------------------------------------------------------------------
R1: B0						MSI: R1 = SE(9):			0101_00001001_0001			R1 = 9
R11: Address of B0			MSI: R11 = SE(69):			0101_01101001_1011			R11 = 105 = 69
Store B0					STR: MEM(R11) = R1:			0010_01_0_0_0001_1011		MEM(105) = 9
---------------------------------------------------------------------------------------------------
R1: B1						MSI: R1 = SE(11):			0101_00001011_0001			R1 = 11  = 0B
R2: Address of B1			MSI: R2 = SE(6A):			0101_01101010_0010			R2 = 106 = 6A
Store B1					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(106) = 11
---------------------------------------------------------------------------------------------------
R1: B2						MSI: R1 = SE(13):			0101_00001101_0001			R1 = 13  = 0D
R2: Address of B2			MSI: R2 = SE(6B):			0101_01101011_0010			R2 = 107 = 6B
Store B2					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(107) = 13
---------------------------------------------------------------------------------------------------
R1: B3						MSI: R1 = SE(12):			0101_00001100_0001			R1 = 12  = 0C
R2: Address of B3			MSI: R2 = SE(6C):			0101_01101100_0010			R2 = 108 = 6C
Store B3					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(108) = 12
---------------------------------------------------------------------------------------------------
R1: B4						MSI: R1 = SE(10):			0101_00001010_0001			R1 = 10  = 0A
R2: Address of B4			MSI: R2 = SE(6D):			0101_01101101_0010			R2 = 109 = 6D
Store B4					STR: MEM(R2) = R1:			0010_01_0_0_0001_0010		MEM(109) = 10
---------------------------------------------------------------------------------------------------
R1: B5						MSI: R1 = SE(8):			0101_00001000_0001			R1 = 8
R9: Address of B5			MSI: R9 = SE(6E):			0101_01101110_1001			R9 = 110 = 6E
Store B5					STR: MEM(R9) = R1:			0010_01_0_0_0001_1001		MEM(210) = 8
---------------------------------------------------------------------------------------------------
FOR(R7<R12)
	FOR(R3<R13)										End_BCol
		R1 = 0	(R9 = 211 + )
		FOR(R2<R14)									End_ACol
			R1 = R1 + R4 * R5 (R10 = 101 + )
R10: Address Offset of A = 101
R11: Address Offset of B = 105																					(LineNum-10)
R8: End ARow Check < R12	MSI: R8 = SE(0):			0101_00000000_1000			R8 = 0	
R3: End BCol Check < R13	MSI: R3 = SE(0):			0101_00000000_0011			R3 = 0						End_ARow (55)
	R2: End ACol Check < R14	MSI: R2 = SE(0):			0101_00000000_0010			R2 = 0					End_BCol (56)	
	R1: MAC Result				MSI: R1 = SE(0):			0101_00000000_0001			R1 = 0						
	R9: Address Offset of O 	ADI: R9 = R9 + SE(01):		1011_00000001_1001			R9 = 110 + 1 = 111				
		Load A0						LDR: R4 = MEM(R10):			0010_00_0_0_1010_0100		R4 = MEM(101) = 4			End_ACol (59)	
		Load B0						LDR: R5 = MEM(R11):			0010_00_0_0_1011_0101		R5 = MEM(105) = 9
		Mult A0 by B0				MUL: R6 = R4 * R5:			1101_0100_0101_0110			R6 = 4 * 9 = 36
		Add A0*B0 To MAC Result		ADR: R1 = R1 + R6:			1001_0001_0110_0001			R1 = 0 + 36 = 36	
		R10: Add to A Address		ADI: R10 = R10 + SE(01):	1011_00000001_1010			R10 = 101 + 1 = 102
		R11: Add to B Address		ADR: R11 = R11 + R13:		1001_1011_1101_1011			R11 = 105 + 3 = 108
		Add 1 to ACol				ADI: R2 = R2 + SE(01):		1011_00000001_0010			R2 = 0 + 1 = 1
		Check (ACol<AColNum)		CMR: R2, R14:				1111_00_00_0010_1110	
		R4: Jump Address End_ACol	MSI: R4 = SE(F8):			0101_11110111_0100			R4 = -9	= F7	
									BRR: 00010, R4:				1111_01_1_00010_0100									Jump End_ACol (-68+59=-9=F7)
	Store A0B0+A1B3				STR: MEM(R9) = R1:			0010_01_0_0_0001_1001		MEM(211) = 36 + 72 = 108
	Add 1 to BCol				ADI: R3 = R3 + SE(01):		1011_00000001_0011			R3 = 0 + 1 = 1
	Check(BCol<R13) 			CMR: R3, R13:				1111_00_00_0011_1101
	Reset R10					MSI: R10 = SE(65):			0101_01100101_1010			R10 = 101 = 65
	Offset						MUL: R4 = R14 * R8:			1101_1110_1000_0100			R4 = 2 * 0 = 0
	R10: Add to B Address		ADR: R10 = R10 + R4:		1001_1010_0100_1010			R10 = 101 + 0 = 101
	Reset R11					MSI: R11 = SE(69):			0101_01101001_1011			R11 = 105 = 69
	R11: Add to B Address		ADR: R11 = R11 + R3:		1001_1011_0011_1011			R11 = 105 + 1 = 106
	R4: Jump Address End_BCol	MSI: R4 = SE(ED):			0101_11101010_0100			R4 = -22 = EA
	IF(ACol<AColNum) End_ACol	BRR: 00010, R4:				1111_01_1_00010_0100									Jump End_BCol (-78+56=-22=EA)
Reset R11					MSI: R11 = SE(69):			0101_01101001_1011			R11 = 105 = 69
NextRowA					ADR: R10 = R10 + R12:		1001_1010_1100_1010			R10 = 101 + 2 = 103
Add 1 to ARow				ADI: R8 = R8 + SE(01):		1011_00000001_1000			R8 = 0 + 1 = 1
Check(ARow<R12)				CMR: R8, R12:				1111_00_00_1000_1100		
R5: Jump Address End_ARow	MSI: R5 = SE(E7):			0101_11100011_0101			R5 = -29 = E3							
IF(ARow<R12) End_ARow		BRR: 00010, R5:				1111_01_1_00010_0101									Jump End_ARow (-84+55=-29=E3)

-------------------------------------------------------------------------------------------------
Expected Results:
|4 3|    |9  11 13|    |72  74  76 |
|7 5| *  |12 10 8 | =  |123 127 131|



