#include <iostream>
#include <fstream>
#include <string>
#include "systemc.h"
#include "systemC_faultable_netlist.h"
#include "fault_injector_seq.h"

using namespace sc_core;

SC_MODULE( testbench ) {

    sc_signal<sc_logic> clk;
    sc_signal<sc_logic> rst;
    sc_signal<sc_logic> readyMEM;
    sc_signal<sc_logic> dataBusIn[16];
    sc_signal<sc_logic> p1TRF[16];
    sc_signal<sc_logic> p2TRF[16];
    sc_signal<sc_logic> readMM;
    sc_signal<sc_logic> writeMM;
    sc_signal<sc_logic> dataBusOut[16];
    sc_signal<sc_logic> addrBus[16];
    sc_signal<sc_logic> outMuxrs1[4];
    sc_signal<sc_logic> outMuxrs2[4];
    sc_signal<sc_logic> outMuxrd[4];
    sc_signal<sc_logic> inDataTRF[16];
    sc_signal<sc_logic> writeTRF;
    sc_signal<sc_logic> readInst;
    sc_signal<sc_logic> NbarT, Si, global_reset, So;

    LGC* fut;
    fault_injector<90, 49, 64>* flt_injector;
    faultRegistry* accessRegistry;

    SC_HAS_PROCESS(testbench);
    testbench(sc_module_name _name){
        accessRegistry = new faultRegistry();
        flt_injector = new fault_injector<90, 49, 64>("fault_injector", accessRegistry);
            // output_port[0:2] is always assigned to scan pins
            flt_injector->output_ports(global_reset);
            flt_injector->output_ports(NbarT);
            flt_injector->output_ports(Si);
            // input_ports[0:2] is always assigned to scan pins
            flt_injector->input_ports(clk);
            flt_injector->input_ports(rst);
            flt_injector->input_ports(So);

            flt_injector->output_ports(readyMEM);
            flt_injector->output_ports(dataBusIn[0]);
            flt_injector->output_ports(dataBusIn[1]);
            flt_injector->output_ports(dataBusIn[2]);
            flt_injector->output_ports(dataBusIn[3]);
            flt_injector->output_ports(dataBusIn[4]);
            flt_injector->output_ports(dataBusIn[5]);
            flt_injector->output_ports(dataBusIn[6]);
            flt_injector->output_ports(dataBusIn[7]);
            flt_injector->output_ports(dataBusIn[8]);
            flt_injector->output_ports(dataBusIn[9]);
            flt_injector->output_ports(dataBusIn[10]);
            flt_injector->output_ports(dataBusIn[11]);
            flt_injector->output_ports(dataBusIn[12]);
            flt_injector->output_ports(dataBusIn[13]);
            flt_injector->output_ports(dataBusIn[14]);
            flt_injector->output_ports(dataBusIn[15]);
            flt_injector->output_ports(p1TRF[0]);
            flt_injector->output_ports(p1TRF[1]);
            flt_injector->output_ports(p1TRF[2]);
            flt_injector->output_ports(p1TRF[3]);
            flt_injector->output_ports(p1TRF[4]);
            flt_injector->output_ports(p1TRF[5]);
            flt_injector->output_ports(p1TRF[6]);
            flt_injector->output_ports(p1TRF[7]);
            flt_injector->output_ports(p1TRF[8]);
            flt_injector->output_ports(p1TRF[9]);
            flt_injector->output_ports(p1TRF[10]);
            flt_injector->output_ports(p1TRF[11]);
            flt_injector->output_ports(p1TRF[12]);
            flt_injector->output_ports(p1TRF[13]);
            flt_injector->output_ports(p1TRF[14]);
            flt_injector->output_ports(p1TRF[15]);
            flt_injector->output_ports(p2TRF[0]);
            flt_injector->output_ports(p2TRF[1]);
            flt_injector->output_ports(p2TRF[2]);
            flt_injector->output_ports(p2TRF[3]);
            flt_injector->output_ports(p2TRF[4]);
            flt_injector->output_ports(p2TRF[5]);
            flt_injector->output_ports(p2TRF[6]);
            flt_injector->output_ports(p2TRF[7]);
            flt_injector->output_ports(p2TRF[8]);
            flt_injector->output_ports(p2TRF[9]);
            flt_injector->output_ports(p2TRF[10]);
            flt_injector->output_ports(p2TRF[11]);
            flt_injector->output_ports(p2TRF[12]);
            flt_injector->output_ports(p2TRF[13]);
            flt_injector->output_ports(p2TRF[14]);
            flt_injector->output_ports(p2TRF[15]);
            flt_injector->input_ports(readMM);
            flt_injector->input_ports(writeMM);
            flt_injector->input_ports(dataBusOut[0]);
            flt_injector->input_ports(dataBusOut[1]);
            flt_injector->input_ports(dataBusOut[2]);
            flt_injector->input_ports(dataBusOut[3]);
            flt_injector->input_ports(dataBusOut[4]);
            flt_injector->input_ports(dataBusOut[5]);
            flt_injector->input_ports(dataBusOut[6]);
            flt_injector->input_ports(dataBusOut[7]);
            flt_injector->input_ports(dataBusOut[8]);
            flt_injector->input_ports(dataBusOut[9]);
            flt_injector->input_ports(dataBusOut[10]);
            flt_injector->input_ports(dataBusOut[11]);
            flt_injector->input_ports(dataBusOut[12]);
            flt_injector->input_ports(dataBusOut[13]);
            flt_injector->input_ports(dataBusOut[14]);
            flt_injector->input_ports(dataBusOut[15]);
            flt_injector->input_ports(addrBus[0]);
            flt_injector->input_ports(addrBus[1]);
            flt_injector->input_ports(addrBus[2]);
            flt_injector->input_ports(addrBus[3]);
            flt_injector->input_ports(addrBus[4]);
            flt_injector->input_ports(addrBus[5]);
            flt_injector->input_ports(addrBus[6]);
            flt_injector->input_ports(addrBus[7]);
            flt_injector->input_ports(addrBus[8]);
            flt_injector->input_ports(addrBus[9]);
            flt_injector->input_ports(addrBus[10]);
            flt_injector->input_ports(addrBus[11]);
            flt_injector->input_ports(addrBus[12]);
            flt_injector->input_ports(addrBus[13]);
            flt_injector->input_ports(addrBus[14]);
            flt_injector->input_ports(addrBus[15]);
            flt_injector->input_ports(outMuxrs1[0]);
            flt_injector->input_ports(outMuxrs1[1]);
            flt_injector->input_ports(outMuxrs1[2]);
            flt_injector->input_ports(outMuxrs1[3]);
            flt_injector->input_ports(outMuxrs2[0]);
            flt_injector->input_ports(outMuxrs2[1]);
            flt_injector->input_ports(outMuxrs2[2]);
            flt_injector->input_ports(outMuxrs2[3]);
            flt_injector->input_ports(outMuxrd[0]);
            flt_injector->input_ports(outMuxrd[1]);
            flt_injector->input_ports(outMuxrd[2]);
            flt_injector->input_ports(outMuxrd[3]);
            flt_injector->input_ports(inDataTRF[0]);
            flt_injector->input_ports(inDataTRF[1]);
            flt_injector->input_ports(inDataTRF[2]);
            flt_injector->input_ports(inDataTRF[3]);
            flt_injector->input_ports(inDataTRF[4]);
            flt_injector->input_ports(inDataTRF[5]);
            flt_injector->input_ports(inDataTRF[6]);
            flt_injector->input_ports(inDataTRF[7]);
            flt_injector->input_ports(inDataTRF[8]);
            flt_injector->input_ports(inDataTRF[9]);
            flt_injector->input_ports(inDataTRF[10]);
            flt_injector->input_ports(inDataTRF[11]);
            flt_injector->input_ports(inDataTRF[12]);
            flt_injector->input_ports(inDataTRF[13]);
            flt_injector->input_ports(inDataTRF[14]);
            flt_injector->input_ports(inDataTRF[15]);
            flt_injector->input_ports(writeTRF);
            flt_injector->input_ports(readInst);
        fut = new LGC("fut", accessRegistry);
            fut->global_reset(global_reset);
            fut->NbarT(NbarT);
            fut->Si(Si);
            fut->So(So);
            fut->clk(clk);
            fut->rst(rst);
            fut->readyMEM(readyMEM);
            fut->dataBusIn[0](dataBusIn[0]);
            fut->dataBusIn[1](dataBusIn[1]);
            fut->dataBusIn[2](dataBusIn[2]);
            fut->dataBusIn[3](dataBusIn[3]);
            fut->dataBusIn[4](dataBusIn[4]);
            fut->dataBusIn[5](dataBusIn[5]);
            fut->dataBusIn[6](dataBusIn[6]);
            fut->dataBusIn[7](dataBusIn[7]);
            fut->dataBusIn[8](dataBusIn[8]);
            fut->dataBusIn[9](dataBusIn[9]);
            fut->dataBusIn[10](dataBusIn[10]);
            fut->dataBusIn[11](dataBusIn[11]);
            fut->dataBusIn[12](dataBusIn[12]);
            fut->dataBusIn[13](dataBusIn[13]);
            fut->dataBusIn[14](dataBusIn[14]);
            fut->dataBusIn[15](dataBusIn[15]);
            fut->p1TRF[0](p1TRF[0]);
            fut->p1TRF[1](p1TRF[1]);
            fut->p1TRF[2](p1TRF[2]);
            fut->p1TRF[3](p1TRF[3]);
            fut->p1TRF[4](p1TRF[4]);
            fut->p1TRF[5](p1TRF[5]);
            fut->p1TRF[6](p1TRF[6]);
            fut->p1TRF[7](p1TRF[7]);
            fut->p1TRF[8](p1TRF[8]);
            fut->p1TRF[9](p1TRF[9]);
            fut->p1TRF[10](p1TRF[10]);
            fut->p1TRF[11](p1TRF[11]);
            fut->p1TRF[12](p1TRF[12]);
            fut->p1TRF[13](p1TRF[13]);
            fut->p1TRF[14](p1TRF[14]);
            fut->p1TRF[15](p1TRF[15]);
            fut->p2TRF[0](p2TRF[0]);
            fut->p2TRF[1](p2TRF[1]);
            fut->p2TRF[2](p2TRF[2]);
            fut->p2TRF[3](p2TRF[3]);
            fut->p2TRF[4](p2TRF[4]);
            fut->p2TRF[5](p2TRF[5]);
            fut->p2TRF[6](p2TRF[6]);
            fut->p2TRF[7](p2TRF[7]);
            fut->p2TRF[8](p2TRF[8]);
            fut->p2TRF[9](p2TRF[9]);
            fut->p2TRF[10](p2TRF[10]);
            fut->p2TRF[11](p2TRF[11]);
            fut->p2TRF[12](p2TRF[12]);
            fut->p2TRF[13](p2TRF[13]);
            fut->p2TRF[14](p2TRF[14]);
            fut->p2TRF[15](p2TRF[15]);
            fut->readMM(readMM);
            fut->writeMM(writeMM);
            fut->dataBusOut[0](dataBusOut[0]);
            fut->dataBusOut[1](dataBusOut[1]);
            fut->dataBusOut[2](dataBusOut[2]);
            fut->dataBusOut[3](dataBusOut[3]);
            fut->dataBusOut[4](dataBusOut[4]);
            fut->dataBusOut[5](dataBusOut[5]);
            fut->dataBusOut[6](dataBusOut[6]);
            fut->dataBusOut[7](dataBusOut[7]);
            fut->dataBusOut[8](dataBusOut[8]);
            fut->dataBusOut[9](dataBusOut[9]);
            fut->dataBusOut[10](dataBusOut[10]);
            fut->dataBusOut[11](dataBusOut[11]);
            fut->dataBusOut[12](dataBusOut[12]);
            fut->dataBusOut[13](dataBusOut[13]);
            fut->dataBusOut[14](dataBusOut[14]);
            fut->dataBusOut[15](dataBusOut[15]);
            fut->addrBus[0](addrBus[0]);
            fut->addrBus[1](addrBus[1]);
            fut->addrBus[2](addrBus[2]);
            fut->addrBus[3](addrBus[3]);
            fut->addrBus[4](addrBus[4]);
            fut->addrBus[5](addrBus[5]);
            fut->addrBus[6](addrBus[6]);
            fut->addrBus[7](addrBus[7]);
            fut->addrBus[8](addrBus[8]);
            fut->addrBus[9](addrBus[9]);
            fut->addrBus[10](addrBus[10]);
            fut->addrBus[11](addrBus[11]);
            fut->addrBus[12](addrBus[12]);
            fut->addrBus[13](addrBus[13]);
            fut->addrBus[14](addrBus[14]);
            fut->addrBus[15](addrBus[15]);
            fut->outMuxrs1[0](outMuxrs1[0]);
            fut->outMuxrs1[1](outMuxrs1[1]);
            fut->outMuxrs1[2](outMuxrs1[2]);
            fut->outMuxrs1[3](outMuxrs1[3]);
            fut->outMuxrs2[0](outMuxrs2[0]);
            fut->outMuxrs2[1](outMuxrs2[1]);
            fut->outMuxrs2[2](outMuxrs2[2]);
            fut->outMuxrs2[3](outMuxrs2[3]);
            fut->outMuxrd[0](outMuxrd[0]);
            fut->outMuxrd[1](outMuxrd[1]);
            fut->outMuxrd[2](outMuxrd[2]);
            fut->outMuxrd[3](outMuxrd[3]);
            fut->inDataTRF[0](inDataTRF[0]);
            fut->inDataTRF[1](inDataTRF[1]);
            fut->inDataTRF[2](inDataTRF[2]);
            fut->inDataTRF[3](inDataTRF[3]);
            fut->inDataTRF[4](inDataTRF[4]);
            fut->inDataTRF[5](inDataTRF[5]);
            fut->inDataTRF[6](inDataTRF[6]);
            fut->inDataTRF[7](inDataTRF[7]);
            fut->inDataTRF[8](inDataTRF[8]);
            fut->inDataTRF[9](inDataTRF[9]);
            fut->inDataTRF[10](inDataTRF[10]);
            fut->inDataTRF[11](inDataTRF[11]);
            fut->inDataTRF[12](inDataTRF[12]);
            fut->inDataTRF[13](inDataTRF[13]);
            fut->inDataTRF[14](inDataTRF[14]);
            fut->inDataTRF[15](inDataTRF[15]);
            fut->writeTRF(writeTRF);
            fut->readInst(readInst);

        SC_THREAD(clocking);

    }

    void clocking(void){
        rst.write(SC_LOGIC_0);
        while(true){
            clk.write(SC_LOGIC_0);
            wait(10, SC_NS);
            clk.write(SC_LOGIC_1);
            wait(10, SC_NS);
        }
    }
};
