
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )


-- Executing script file `yosys_script.ys' --

1. Executing GHDL.
Importing module ROM_MBIST_TOP.
Importing module rom_mbist_controller.
Importing module rom_mbist_dp_300.
Importing module misr_16.
Importing module counter_16.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: counter_16          
root of   0 design levels: misr_16             
root of   1 design levels: rom_mbist_dp_300    
root of   0 design levels: rom_mbist_controller
root of   2 design levels: ROM_MBIST_TOP       
Automatically selected ROM_MBIST_TOP as design top module.

2.2. Analyzing design hierarchy..
Top module:  \ROM_MBIST_TOP
Used module:     \rom_mbist_dp_300
Used module:         \counter_16
Used module:         \misr_16
Used module:     \rom_mbist_controller

2.3. Analyzing design hierarchy..
Top module:  \ROM_MBIST_TOP
Used module:     \rom_mbist_dp_300
Used module:         \counter_16
Used module:         \misr_16
Used module:     \rom_mbist_controller
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ROM_MBIST_TOP
Used module:     \rom_mbist_dp_300
Used module:         \counter_16
Used module:         \misr_16
Used module:     \rom_mbist_controller

3.1.2. Analyzing design hierarchy..
Top module:  \ROM_MBIST_TOP
Used module:     \rom_mbist_dp_300
Used module:         \counter_16
Used module:         \misr_16
Used module:     \rom_mbist_controller
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_dp_300.
<suppressed ~1 debug messages>
Optimizing module rom_mbist_controller.
<suppressed ~2 debug messages>
Optimizing module ROM_MBIST_TOP.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_dp_300.
Optimizing module rom_mbist_controller.
Optimizing module ROM_MBIST_TOP.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_dp_300..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \ROM_MBIST_TOP..
Removed 0 unused cells and 28 unused wires.
<suppressed ~5 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module ROM_MBIST_TOP...
Checking module counter_16...
Checking module misr_16...
Checking module rom_mbist_controller...
Checking module rom_mbist_dp_300...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
<suppressed ~9 debug messages>
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 3 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
    New ctrl vector for $pmux cell \102: { $auto$opt_reduce.cc:134:opt_mux$107 $auto$ghdl.cc:759:import_module$16 }
    New ctrl vector for $pmux cell \84: { $auto$opt_reduce.cc:134:opt_mux$109 $auto$ghdl.cc:759:import_module$16 }
    New ctrl vector for $pmux cell \89: { $auto$opt_reduce.cc:134:opt_mux$111 $auto$ghdl.cc:759:import_module$16 }
    New ctrl vector for $pmux cell \93: { $auto$ghdl.cc:759:import_module$18 $auto$opt_reduce.cc:134:opt_mux$113 }
    New ctrl vector for $pmux cell \97: { $auto$ghdl.cc:759:import_module$18 $auto$opt_reduce.cc:134:opt_mux$115 }
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 5 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
<suppressed ~15 debug messages>
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 5 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
    New ctrl vector for $pmux cell \106: { $auto$opt_reduce.cc:134:opt_mux$117 $auto$ghdl.cc:759:import_module$16 }
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 1 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 1 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.6.20. Executing OPT_DFF pass (perform DFF optimizations).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking rom_mbist_controller.pstate as FSM state register:
    Circuit seems to be self-resetting.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on \281 ($dff) from module counter_16 (D = $auto$ghdl.cc:759:import_module$103, Q = \temp, rval = 17'00000000000000000).
Adding EN signal on $auto$opt_dff.cc:731:run$118 ($sdff) from module counter_16 (D = $auto$ghdl.cc:759:import_module$102, Q = \temp).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 17) from port B of cell counter_16.\270 ($add).
Removed top 16 bits (of 17) from port B of cell counter_16.\273 ($sub).
Removed top 1 bits (of 2) from mux cell rom_mbist_controller.\36 ($mux).
Removed top 1 bits (of 2) from port B of cell rom_mbist_controller.\43 ($eq).
Removed top 1 bits (of 2) from mux cell rom_mbist_controller.\46 ($mux).
Removed top 1 bits (of 2) from wire rom_mbist_controller.$auto$ghdl.cc:759:import_module$15.
Removed top 1 bits (of 2) from wire rom_mbist_controller.$auto$ghdl.cc:759:import_module$19.
Removed top 15 bits (of 32) from port A of cell rom_mbist_dp_300.\126 ($modfloor).
Removed top 25 bits (of 32) from port B of cell rom_mbist_dp_300.\126 ($modfloor).
Removed top 7 bits (of 16) from port B of cell rom_mbist_dp_300.\135 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ROM_MBIST_TOP:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module counter_16:
  creating $macc model for \270 ($add).
  creating $macc model for \273 ($sub).
  creating $alu model for $macc \273.
  creating $alu model for $macc \270.
  creating $alu cell for \270: $auto$alumacc.cc:485:replace_alu$122
  creating $alu cell for \273: $auto$alumacc.cc:485:replace_alu$125
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module misr_16:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module rom_mbist_controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module rom_mbist_dp_300:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
<suppressed ~13 debug messages>
Optimizing module rom_mbist_dp_300.
<suppressed ~2 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 1 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
    Consolidated identical input bits for $mux cell \41:
      Old ports: A=2'10, B=2'00, Y=$auto$ghdl.cc:759:import_module$17
      New ports: A=1'1, B=1'0, Y=$auto$ghdl.cc:759:import_module$17 [1]
      New connections: $auto$ghdl.cc:759:import_module$17 [0] = 1'0
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 1 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux \274 in front of them:
        $auto$alumacc.cc:485:replace_alu$122
        $auto$alumacc.cc:485:replace_alu$125

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
<suppressed ~2 debug messages>
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
<suppressed ~1 debug messages>
Optimizing module rom_mbist_dp_300.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$131:
      Old ports: A=17'11111111111111111, B=17'00000000000000001, Y=$auto$rtlil.cc:2409:Mux$132
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2409:Mux$132 [1]
      New connections: { $auto$rtlil.cc:2409:Mux$132 [16:2] $auto$rtlil.cc:2409:Mux$132 [0] } = { $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] $auto$rtlil.cc:2409:Mux$132 [1] 1'1 }
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 1 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 1 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 0 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
<suppressed ~1 debug messages>
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using template $paramod$eecca7f0ea08233cd73573493ac5f9decbd15c61\_90_modfloor for cells of type $modfloor.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$eecca7f0ea08233cd73573493ac5f9decbd15c61\$__div_mod_floor for cells of type $__div_mod_floor.
Using extmapper simplemap for cells of type $mux.
Running "alumacc" on wrapper $extern:wrap:$add:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000100000 for cells of type $__div_mod_u.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$789c344356a154d2afc7b832b41d1067dbc946ba\_90_alu for cells of type $alu.
Using template $paramod$e39069e3f4ee35c1eea86993bd74689959babaab\_90_alu for cells of type $alu.
Using template $paramod$d7aca3dc44b07ff19908fb1a3b606577588c15f1\_90_alu for cells of type $alu.
Using template $paramod$f9e3a3c4b84f99cb56fad07743ec44ad55b11c8b\_90_alu for cells of type $alu.
Using template $paramod$dd5ba471f7dcf35707f23b88cfd15b9582f97277\_90_alu for cells of type $alu.
Using template $paramod$b7531bc0616f8d4cdd8159edd2237c9ddbb2ce01\_90_alu for cells of type $alu.
Using template $paramod$ff8ba121d2f8e85b775c9f35ef677a1a276e7e1b\_90_alu for cells of type $alu.
Using template $paramod$9a66d4bebbc4fab84566caffef9f094a1a467389\_90_alu for cells of type $alu.
Using template $paramod$57bc309a5d8a948cec8981d26d896ee1cbf54d58\_90_alu for cells of type $alu.
Using template $paramod$f94cfdb8ad389f4fc4515bcb65bccd7e2d189e95\_90_alu for cells of type $alu.
Using template $paramod$2a25669ccd39fe7c0fbfb2a4d17416fc78667f00\_90_alu for cells of type $alu.
Using template $paramod$d9397dfdf5f7cf5715aebc9527845402880218a0\_90_alu for cells of type $alu.
Using template $paramod$acc477ace2583cc2ee0cf651c72a385d2bbbe9f1\_90_alu for cells of type $alu.
Using template $paramod$415abdcadc251df4f0f033b62b8f3296b8461b4e\_90_alu for cells of type $alu.
Using template $paramod$6573c1c269218f299badf6e04ca86aa37fdb352c\_90_alu for cells of type $alu.
Using template $paramod$6a21b72c9c0b32e81b169c7e08a4d8b9c462448f\_90_alu for cells of type $alu.
Using template $paramod$324e0706ebb77f1915b22f4a136962ec3fd1d7ff\_90_alu for cells of type $alu.
Using template $paramod$461fc931d630cb01bec1fea87f37fbcc53f6f6a4\_90_alu for cells of type $alu.
Using template $paramod$fe074227b1c5fbaa1ea56076182c29dbcf3a782a\_90_alu for cells of type $alu.
Using template $paramod$85502450775e62e9c6a2fe29020b3433d4335647\_90_alu for cells of type $alu.
Using template $paramod$e32c921f95fe0e2350204f4ecefc9e296355521b\_90_alu for cells of type $alu.
Using template $paramod$05d913fba320393c7e943e625bef3af776153b60\_90_alu for cells of type $alu.
Using template $paramod$8e07e2c0a3efc148d2f3714f3901076678774ed1\_90_alu for cells of type $alu.
Using template $paramod$5b7e592b3c2951af6800b7fd597f66a79b72b91c\_90_alu for cells of type $alu.
Using template $paramod$90182783100594e2dd636a282c4723cfc9adaedd\_90_alu for cells of type $alu.
Using template $paramod$851c5c9b30913ea2deae68e3ca9e9c4e649723bc\_90_alu for cells of type $alu.
Using template $paramod$1445aacdb5f2a1ef9fedf1373097ffa45438211d\_90_alu for cells of type $alu.
Using template $paramod$7add42b712fe5bbbba521e93062103d6bf78a453\_90_alu for cells of type $alu.
Using template $paramod$b6f86f6a0c43c26b22ee55f51e05d5951f0e6562\_90_alu for cells of type $alu.
Using template $paramod$044fdceace8c449ec99f900b42120ac005ff4065\_90_alu for cells of type $alu.
Using template $paramod$b6b58933bcf3c8b9e3e5de18c2637bd0e12c7c47\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dffsr.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $tribuf.
No more expansions possible.
<suppressed ~22274 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
<suppressed ~23 debug messages>
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
<suppressed ~9 debug messages>
Optimizing module rom_mbist_dp_300.
<suppressed ~28206 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
<suppressed ~3 debug messages>
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
<suppressed ~20724 debug messages>
Removed a total of 6909 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 510 unused cells and 16456 unused wires.
<suppressed ~516 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\ROM_MBIST_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `\counter_16' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 165 wires to a netlist network with 35 inputs and 17 outputs.

3.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:               MUX cells:       16
ABC RESULTS:               NOR cells:       15
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       21
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:       28
ABC RESULTS:        internal signals:      113
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       17
Removing temp directory.

3.22.3. Extracting gate netlist of module `\misr_16' to `<abc-temp-dir>/input.blif'..
Extracted 111 gates and 162 wires to a netlist network with 50 inputs and 48 outputs.

3.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:       15
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              XNOR cells:       15
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:       64
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       48
Removing temp directory.

3.22.4. Extracting gate netlist of module `\rom_mbist_controller' to `<abc-temp-dir>/input.blif'..
Extracted 20 gates and 28 wires to a netlist network with 6 inputs and 7 outputs.

3.22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        7
Removing temp directory.

3.22.5. Extracting gate netlist of module `\rom_mbist_dp_300' to `<abc-temp-dir>/input.blif'..
Extracted 2259 gates and 2276 wires to a netlist network with 16 inputs and 2 outputs.

3.22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:            ANDNOT cells:      679
ABC RESULTS:               MUX cells:      296
ABC RESULTS:              NAND cells:       28
ABC RESULTS:               NOR cells:      146
ABC RESULTS:               NOT cells:      117
ABC RESULTS:                OR cells:      121
ABC RESULTS:             ORNOT cells:       92
ABC RESULTS:              XNOR cells:       27
ABC RESULTS:               XOR cells:      258
ABC RESULTS:        internal signals:     2258
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        2
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
<suppressed ~1 debug messages>
Optimizing module misr_16.
<suppressed ~16 debug messages>
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
<suppressed ~174 debug messages>
Removed a total of 58 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 1 unused cells and 1142 unused wires.
<suppressed ~5 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \ROM_MBIST_TOP
Used module:     \rom_mbist_controller
Used module:     \rom_mbist_dp_300
Used module:         \counter_16
Used module:         \misr_16

3.24.2. Analyzing design hierarchy..
Top module:  \ROM_MBIST_TOP
Used module:     \rom_mbist_controller
Used module:     \rom_mbist_dp_300
Used module:         \counter_16
Used module:         \misr_16
Removed 0 unused modules.

3.25. Printing statistics.

=== ROM_MBIST_TOP ===

   Number of wires:                 17
   Number of wire bits:             77
   Number of public wires:          17
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $_TBUF_                        16
     rom_mbist_controller            1
     rom_mbist_dp_300                1

=== counter_16 ===

   Number of wires:                138
   Number of wire bits:            184
   Number of public wires:           9
   Number of public wire bits:      55
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                146
     $_ANDNOT_                      33
     $_MUX_                         16
     $_NOR_                         15
     $_NOT_                          2
     $_ORNOT_                       10
     $_OR_                          21
     $_SDFFE_PP0P_                  17
     $_XNOR_                         4
     $_XOR_                         28

=== misr_16 ===

   Number of wires:                103
   Number of wire bits:            178
   Number of public wires:           8
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     $_ANDNOT_                      16
     $_AND_                         17
     $_DFFSR_PPP_                   16
     $_MUX_                         16
     $_NAND_                        15
     $_XNOR_                        15
     $_XOR_                         16

=== rom_mbist_controller ===

   Number of wires:                 31
   Number of wire bits:             45
   Number of public wires:          23
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $_ANDNOT_                       5
     $_DFF_PP0_                      2
     $_MUX_                          1
     $_NAND_                         1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        1
     $_OR_                           4

=== rom_mbist_dp_300 ===

   Number of wires:               1788
   Number of wire bits:           4318
   Number of public wires:          67
   Number of public wire bits:    2597
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1725
     $_ANDNOT_                     638
     $_AND_                         17
     $_MUX_                        294
     $_NAND_                        28
     $_NOR_                        136
     $_NOT_                        117
     $_ORNOT_                       91
     $_OR_                         117
     $_XNOR_                        27
     $_XOR_                        258
     counter_16                      1
     misr_16                         1

=== design hierarchy ===

   ROM_MBIST_TOP                     1
     rom_mbist_controller            1
     rom_mbist_dp_300                1
       counter_16                    1
       misr_16                       1

   Number of wires:               2077
   Number of wire bits:           4802
   Number of public wires:         124
   Number of public wire bits:    2849
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2013
     $_ANDNOT_                     692
     $_AND_                         34
     $_DFFSR_PPP_                   16
     $_DFF_PP0_                      2
     $_MUX_                        327
     $_NAND_                        44
     $_NOR_                        153
     $_NOT_                        120
     $_ORNOT_                      102
     $_OR_                         142
     $_SDFFE_PP0P_                  17
     $_TBUF_                        16
     $_XNOR_                        46
     $_XOR_                        302

3.26. Executing CHECK pass (checking for obvious problems).
Checking module ROM_MBIST_TOP...
Checking module counter_16...
Checking module misr_16...
Checking module rom_mbist_controller...
Checking module rom_mbist_dp_300...
Found and reported 0 problems.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
<suppressed ~4 debug messages>
Optimizing module rom_mbist_dp_300.
<suppressed ~185 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

4.10. Rerunning OPT passes. (Maybe there is more to do..)

4.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \misr_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rom_mbist_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rom_mbist_dp_300..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
  Optimizing cells in module \counter_16.
  Optimizing cells in module \misr_16.
  Optimizing cells in module \rom_mbist_controller.
  Optimizing cells in module \rom_mbist_dp_300.
Performed a total of 0 changes.

4.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Finding identical cells in module `\counter_16'.
Finding identical cells in module `\misr_16'.
Finding identical cells in module `\rom_mbist_controller'.
Finding identical cells in module `\rom_mbist_dp_300'.
Removed a total of 0 cells.

4.14. Executing OPT_SHARE pass.

4.15. Executing OPT_DFF pass (perform DFF optimizations).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Finding unused cells or wires in module \counter_16..
Finding unused cells or wires in module \misr_16..
Finding unused cells or wires in module \rom_mbist_controller..
Finding unused cells or wires in module \rom_mbist_dp_300..

4.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
Optimizing module counter_16.
Optimizing module misr_16.
Optimizing module rom_mbist_controller.
Optimizing module rom_mbist_dp_300.

4.18. Finished OPT passes. (There is nothing left to do.)

5. Executing FLATTEN pass (flatten design).
Deleting now unused module counter_16.
Deleting now unused module misr_16.
Deleting now unused module rom_mbist_controller.
Deleting now unused module rom_mbist_dp_300.
<suppressed ~4 debug messages>

6. Executing ASYNC2SYNC pass.
Replacing ROM_MBIST_TOP.$flatten\controller.$auto$simplemap.cc:377:simplemap_ff$44266 ($_DFF_PP0_): ARST=\controller.rst, D=\controller.nstate [0], Q=\controller.pstate [0]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44427 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[0], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[0], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[0], Q=\datapath.test_misr.data [0]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44428 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[1], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[1], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[1], Q=\datapath.test_misr.data [1]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44429 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[2], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[2], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[2], Q=\datapath.test_misr.data [2]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44430 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[3], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[3], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[3], Q=\datapath.test_misr.data [3]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44431 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[4], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[4], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[4], Q=\datapath.test_misr.data [4]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44432 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[5], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[5], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[5], Q=\datapath.test_misr.data [5]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44433 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[6], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[6], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[6], Q=\datapath.test_misr.data [6]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44434 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[7], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[7], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[7], Q=\datapath.test_misr.data [7]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44435 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[8], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[8], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[8], Q=\datapath.test_misr.data [8]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44436 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[9], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[9], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[9], Q=\datapath.test_misr.data [9]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44437 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[10], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[10], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[10], Q=\datapath.test_misr.data [10]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44438 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[11], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[11], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[11], Q=\datapath.test_misr.data [11]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44439 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[12], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[12], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[12], Q=\datapath.test_misr.data [12]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44440 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[13], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[13], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[13], Q=\datapath.test_misr.data [13]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44441 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[14], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[14], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[14], Q=\datapath.test_misr.data [14]
Replacing ROM_MBIST_TOP.$flatten\controller.$auto$simplemap.cc:377:simplemap_ff$44267 ($_DFF_PP0_): ARST=\controller.rst, D=\controller.nstate [1], Q=\controller.pstate [1]
Replacing ROM_MBIST_TOP.$flatten\datapath.\test_misr.$auto$simplemap.cc:377:simplemap_ff$44442 ($_DFFSR_PPP_): SET=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1029:import_module$93[15], CLR=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:1034:import_module$97[15], D=$flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[15], Q=\datapath.test_misr.data [15]

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_N (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_N_.
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFF_NN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN0_.
  cell DFF_NN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN1_.
  cell DFF_NP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP0_.
  cell DFF_NP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP1_.
  cell DFF_PN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  cell DFF_PN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN1_.
  cell DFF_PP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP0_.
  cell DFF_PP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP1_.
  final dff cell mappings:
    \DFF_N _DFF_N_ (.C( C), .D( D), .Q( Q));
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    \DFF_NN0 _DFF_NN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NN1 _DFF_NN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP0 _DFF_NP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP1 _DFF_NP1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN0 _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN1 _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP0 _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP1 _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

7.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ROM_MBIST_TOP':
  mapped 35 $_DFF_P_ cells to \DFF cells.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.
<suppressed ~18 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
<suppressed ~75 debug messages>
Removed a total of 25 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Removed 0 unused cells and 43 unused wires.
<suppressed ~1 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

8.16. Finished OPT passes. (There is nothing left to do.)

9. Executing ABC pass (technology mapping using ABC).

9.1. Extracting gate netlist of module `\ROM_MBIST_TOP' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$53489: \datapath.test_misr.data [0] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[0]
                                               \datapath.test_misr.data [0] -> $flatten\datapath.\test_misr.$abc$51327$new_n100_
                                               \datapath.test_misr.data [0] -> $flatten\datapath.\test_misr.$abc$51327$new_n104_
Breaking loop using new signal $abcloop$53490: \datapath.test_misr.data [1] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[1]
                                               \datapath.test_misr.data [1] -> $flatten\datapath.\test_misr.$abc$51327$new_n102_
Breaking loop using new signal $abcloop$53491: \datapath.test_misr.data [2] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[2]
                                               \datapath.test_misr.data [2] -> $flatten\datapath.\test_misr.$abc$51327$new_n106_
Breaking loop using new signal $abcloop$53492: \datapath.test_misr.data [3] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[3]
                                               \datapath.test_misr.data [3] -> $flatten\datapath.\test_misr.$abc$51327$new_n110_
Breaking loop using new signal $abcloop$53493: \datapath.test_misr.data [4] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[4]
                                               \datapath.test_misr.data [4] -> $flatten\datapath.\test_misr.$abc$51327$new_n114_
Breaking loop using new signal $abcloop$53494: \datapath.test_misr.data [5] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[5]
                                               \datapath.test_misr.data [5] -> $flatten\datapath.\test_misr.$abc$51327$new_n118_
Breaking loop using new signal $abcloop$53495: \datapath.test_misr.data [6] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[6]
                                               \datapath.test_misr.data [6] -> $flatten\datapath.\test_misr.$abc$51327$new_n122_
Breaking loop using new signal $abcloop$53496: \datapath.test_misr.data [7] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[7]
                                               \datapath.test_misr.data [7] -> $flatten\datapath.\test_misr.$abc$51327$new_n126_
Breaking loop using new signal $abcloop$53497: \datapath.test_misr.data [8] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[8]
                                               \datapath.test_misr.data [8] -> $flatten\datapath.\test_misr.$abc$51327$new_n130_
Breaking loop using new signal $abcloop$53498: \datapath.test_misr.data [9] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[9]
                                               \datapath.test_misr.data [9] -> $flatten\datapath.\test_misr.$abc$51327$new_n134_
Breaking loop using new signal $abcloop$53499: \datapath.test_misr.data [10] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[10]
                                               \datapath.test_misr.data [10] -> $flatten\datapath.\test_misr.$abc$51327$new_n138_
Breaking loop using new signal $abcloop$53500: \datapath.test_misr.data [11] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[11]
                                               \datapath.test_misr.data [11] -> $flatten\datapath.\test_misr.$abc$51327$new_n142_
Breaking loop using new signal $abcloop$53501: \datapath.test_misr.data [12] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[12]
                                               \datapath.test_misr.data [12] -> $flatten\datapath.\test_misr.$abc$51327$new_n146_
Breaking loop using new signal $abcloop$53502: \datapath.test_misr.data [13] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[13]
                                               \datapath.test_misr.data [13] -> $flatten\datapath.\test_misr.$abc$51327$new_n150_
Breaking loop using new signal $abcloop$53503: \datapath.test_misr.data [14] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[14]
                                               \datapath.test_misr.data [14] -> $flatten\datapath.\test_misr.$abc$51327$new_n154_
Breaking loop using new signal $abcloop$53504: \datapath.test_misr.data [15] -> $flatten\datapath.\test_misr.$abc$51327$auto$ghdl.cc:759:import_module$91[15]
                                               \datapath.test_misr.data [15] -> $flatten\datapath.\test_misr.$abc$51327$new_n158_
Extracted 2050 gates and 2122 wires to a netlist network with 69 inputs and 52 outputs.

9.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

9.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      273
ABC RESULTS:               NOR cells:      269
ABC RESULTS:               NOT cells:       78
ABC RESULTS:        internal signals:     2001
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       52
Removing temp directory.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Removed 0 unused cells and 2144 unused wires.
<suppressed ~20 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing HILOMAP pass (mapping to constant drivers).

12. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port ROM_MBIST_TOP.READINST using OBUF.
Mapping port ROM_MBIST_TOP.ROMAddr using OBUF.
Mapping port ROM_MBIST_TOP.ROMDATA using IBUF.
Mapping port ROM_MBIST_TOP.SIGNATURE using OBUF.
Mapping port ROM_MBIST_TOP.clk using IBUF.
Mapping port ROM_MBIST_TOP.rst using IBUF.
Mapping port ROM_MBIST_TOP.start using IBUF.

13. Executing SPLITNETS pass (splitting up multi-bit signals).

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Removed 959 unused cells and 1963 unused wires.
<suppressed ~1928 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

14.16. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 1754 unused wires.

15. Executing TECHMAP pass (map to technology primitives).

15.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/DFF_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/DFF_map.v' to AST representation.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFF_N'.
Generating RTLIL representation for module `\DFF_PP0'.
Generating RTLIL representation for module `\DFF_PP1'.
Generating RTLIL representation for module `\DFF_PN0'.
Generating RTLIL representation for module `\DFF_PN1'.
Generating RTLIL representation for module `\DFF_NN0'.
Generating RTLIL representation for module `\DFF_NN1'.
Generating RTLIL representation for module `\DFF_NP0'.
Generating RTLIL representation for module `\DFF_NP1'.
Successfully finished Verilog frontend.

15.2. Continuing TECHMAP pass.
Using template DFF for cells of type DFF.
No more expansions possible.
<suppressed ~47 debug messages>

16. Executing ABC pass (technology mapping using ABC).

16.1. Extracting gate netlist of module `\ROM_MBIST_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

17. Executing OPT pass (performing simple optimizations).

17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

17.6. Executing OPT_DFF pass (perform DFF optimizations).

17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Removed 0 unused cells and 210 unused wires.
<suppressed ~1 debug messages>

17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

17.9. Rerunning OPT passes. (Maybe there is more to do..)

17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

17.13. Executing OPT_DFF pass (perform DFF optimizations).

17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..

17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

17.16. Finished OPT passes. (There is nothing left to do.)

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/Logic_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/SAYAC/MBIST2/SYNTH/lib/Logic_map.v' to AST representation.
Generating RTLIL representation for module `\BUF'.
Generating RTLIL representation for module `\TIELOM'.
Generating RTLIL representation for module `\TIEHIM'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\NOT'.
Generating RTLIL representation for module `\AND'.
Generating RTLIL representation for module `\NAND'.
Generating RTLIL representation for module `\OR'.
Generating RTLIL representation for module `\NOR'.
Generating RTLIL representation for module `\XOR'.
Generating RTLIL representation for module `\XNOR'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
Using template NOT for cells of type NOT.
Using template NOR for cells of type NOR.
Using template NAND for cells of type NAND.
Using template IBUF for cells of type IBUF.
Using template OBUF for cells of type OBUF.
No more expansions possible.
<suppressed ~686 debug messages>

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

19.6. Executing OPT_DFF pass (perform DFF optimizations).

19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..
Removed 0 unused cells and 1886 unused wires.
<suppressed ~1 debug messages>

19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

19.9. Rerunning OPT passes. (Maybe there is more to do..)

19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ROM_MBIST_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ROM_MBIST_TOP.
Performed a total of 0 changes.

19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ROM_MBIST_TOP'.
Removed a total of 0 cells.

19.13. Executing OPT_DFF pass (perform DFF optimizations).

19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ROM_MBIST_TOP.

19.16. Finished OPT passes. (There is nothing left to do.)

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ROM_MBIST_TOP..

21. Printing statistics.

=== ROM_MBIST_TOP ===

   Number of wires:                732
   Number of wire bits:            777
   Number of public wires:          60
   Number of public wire bits:     105
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                723
     $_TBUF_                        16
     dff                            35
     nand_n                        273
     nor_n                         269
     notg                           78
     pin                            19
     pout                           33

End of script. Logfile hash: 7f7e49c825, CPU: user 66.57s system 0.60s
Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )
Time spent: 51% 3x techmap (34 sec), 16% 102x opt_expr (11 sec), ...
